#!/bin/bash -x

# Bash shell script for generating self-signed certs. Run this in a folder, as it
# generates a few files. Large portions of this script were taken from the
# following artcile:
#
# http://usrportage.de/archives/919-Batch-generating-SSL-certificates.html
#
# Additional alterations by: Brad Landers
# Date: 2012-01-27

# Script accepts a single argument, the fqdn for the cert
DOMAIN="$1"
if [ -z "${DOMAIN}" ]; then
  echo "Usage: $(basename $0) <domain>"
  exit 11
fi

fail_if_error() {
  [ $1 != 0 ] && {
    unset PASSPHRASE
    exit 10
  }
}

# Generate a passphrase
export PASSPHRASE=$(head -c 500 /dev/urandom | LC_ALL=C tr -dc a-z0-9A-Z | head -c 128; echo)

# Certificate details; replace items in angle brackets with your own info
subj="
C=US
ST=WA
O=Blue Box Group
localityName=Seattle
commonName=${DOMAIN}
organizationalUnitName=
emailAddress=hostmaster@bluebox.net
"

# Generate the server private key
openssl genrsa -des3 -out ${DOMAIN}.key -passout env:PASSPHRASE 2048
fail_if_error $?

# Generate the CSR
openssl req \
    -new \
    -batch \
    -subj "$(echo -n "$subj" | tr "\n" "/")" \
    -sha256 \
    -key ${DOMAIN}.key \
    -out ${DOMAIN}.csr \
    -passin env:PASSPHRASE
fail_if_error $?
cp ${DOMAIN}.key ${DOMAIN}.key.org
fail_if_error $?

# Strip the password so we don't have to type it every time we restart Apache
openssl rsa -in ${DOMAIN}.key.org -out ${DOMAIN}.key -passin env:PASSPHRASE
fail_if_error $?

# Generate an extensions configuration file for SAN
cat >> req.conf <<eof
[ v3_req ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment, keyCertSign
subjectAltName = @alt_names

[alt_names]
DNS.1 = ${DOMAIN}
DNS.2 = swift.${DOMAIN}
eof

# Generate the cert (good for 10 years)
openssl x509 -req -extfile req.conf -extensions v3_req -days 3650 -sha256 -in ${DOMAIN}.csr -signkey ${DOMAIN}.key -out ${DOMAIN}.crt
fail_if_error $?

exit 0
