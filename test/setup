#!/bin/bash -x

# if in jenkins, make the venv from the workspace and build ID
# to allow concurrent runs.
if [[ "$CI" == "jenkins" ]]; then
    VENV=$WORKSPACE/venv
    USE_PRIVATE_IPS="true"
    virtualenv $VENV
    source $VENV/bin/activate
    pip install -U pip
    pip install -U -r requirements.txt
fi

source $(dirname $0)/common

USE_PRIVATE_IPS=${USE_PRIVATE_IPS:-"false"}

${ROOT}/test/check-deps

echo "testenv_instance_prefix: ${testenv_instance_prefix}"
echo "testenv_heat_stack_name: ${testenv_heat_stack_name}"

echo "writing initial inventory file"
mkdir -p ${ROOT}/envs/test
cat > ${ROOT}/envs/test/hosts <<eof
[local]
# Tell ansible to use the python in PATH instead of /usr/bin/python
localhost ansible_python_interpreter=python ansible_connection=local
eof

cp ${ROOT}/envs/example/defaults-2.0.yml ${ANSIBLE_VAR_DEFAULTS_FILE}
cat <<eof >> ${ANSIBLE_VAR_DEFAULTS_FILE}
testenv_instance_prefix: ${testenv_instance_prefix}
testenv_keypair_name: ${KEY_NAME}
testenv_keypair_path: ${KEY_PATH}
eof

echo "deleting heat stack to destroy resources including VMs: ${VMS}"
${ROOT}/test/cleanup

echo "creating heat template for test env ..."
ursula --ursula-debug "envs/test" ${ROOT}/playbooks/${TEST_ENV}/tasks/create_heat_template.yml --extra-vars="use_private_ips=${USE_PRIVATE_IPS}"

echo "building config"
rm -rf ${ROOT}/envs/test/group_vars/
rm -f ${ROOT}/envs/test/hosts
mkdir -p ${ROOT}/envs/test/group_vars
cp -r ${ROOT}/envs/example/${TEST_ENV}/* ${ROOT}/envs/test
echo "testenv_instance_prefix: ${testenv_instance_prefix}" >> ${ROOT}/envs/test/group_vars/all.yml

echo "generating ssl cert for openstack.example.com"
CERT_DIR=$(mktemp -d 2> /dev/null || mktemp -d -t 'setup')
pushd ${CERT_DIR}
${ROOT}/test/gen-cert openstack.example.com
cat >> ${ROOT}/envs/test/group_vars/all.yml <<eof
ssl:
  crt: |
eof
cat ${CERT_DIR}/openstack.example.com.crt | sed 's/^/    /' >> ${ROOT}/envs/test/group_vars/all.yml
cat >> ${ROOT}/envs/test/group_vars/all.yml <<eof
  key: |
eof
cat ${CERT_DIR}/openstack.example.com.key | sed 's/^/    /' >> ${ROOT}/envs/test/group_vars/all.yml
UNDERCLOUD_CIDR="$(python -c 'import shade; cloud = shade.openstack_cloud(); print cloud.search_subnets("internal")[0]["cidr"]')"
cat >> ${ROOT}/envs/test/defaults-2.0.yml <<eof
undercloud_cidr:
  - cidr: ${UNDERCLOUD_CIDR}
eof
popd
rm -rf ${CERT_DIR}

echo "booting ${VMS} by heat, then copy files for pre-deployment"
extra_args="--ursula-debug --provisioner=heat --heat-stack-name=${testenv_heat_stack_name}"
ursula ${extra_args} "envs/test" ${ROOT}/playbooks/${TEST_ENV}/tasks/pre-deploy.yml -u ${LOGIN_USER} "$@"

if [[ ${TEST_ENV} == "ci-allinone" ]]; then
  CONTROLLER_IP=$(private_ip ${testenv_instance_prefix}-allinone)
else
  CONTROLLER_IP=$(private_ip ${testenv_instance_prefix}-controller-0)
fi

cat >> ${ROOT}/envs/test/group_vars/all.yml <<eof
controller_primary: ${CONTROLLER_IP}
ursula_env_path: ${ROOT}/envs/test
eof

if [[ ${TEST_ENV} == "ci-ceph_swift" ]]; then
  echo "generating ring_definition.yml file for swift ..."
  swift_0_ip="$(private_ip ${testenv_instance_prefix}-swift-0)"
  swift_1_ip="$(private_ip ${testenv_instance_prefix}-swift-1)"
  swift_2_ip="$(private_ip ${testenv_instance_prefix}-swift-2)"
  cat > ${ROOT}/envs/test/ring_definition.yml <<eof
---
part_power: 13
replicas: 3
min_part_hours: 1
zones:
  z1:
    ${swift_0_ip}:
      disks:
        - vdb1
  z2:
    ${swift_1_ip}:
      disks:
        - vdb1
  z3:
    ${swift_2_ip}:
      disks:
        - vdb1
eof
fi

ring_bell
echo "vms are up: ${VMS} !!"
